#!/usr/bin/env python3

import click
import os
import sys

from nearuplib.localnet import entry
from nearuplib.nodelib import setup_and_run, stop, show_logs


@click.group()
def cli():
    pass


@cli.command()
@click.argument('network',
                type=click.Choice({'mainnet', 'testnet', 'betanet',
                                   'localnet'}))
@click.option(
    '--binary-path',
    type=str,
    default='',
    help=
    'Near binary path, use nearcore/target/debug or nearcore/target/release for local development'
)
@click.option(
    '--home',
    type=str,
    help=
    f'Home path for storing configs, keys and chain data (Default: ~/.near/testnet)'
)
@click.option('--account-id', type=str, help='Specify the node account ID')
@click.option('--boot-nodes', type=str, help='Specify the nodes to boot from')
@click.option('--verbose', is_flag=True, help='If set, prints verbose logs')
def run(network, binary_path, home, account_id, boot_nodes, verbose):
    print(network)
    if home:
        home = os.path.abspath(home)
    else:
        home = os.path.expanduser(f'~/.near/{network}')

    print(home)

    nodocker = True
    image = None

    if network == 'localnet':
        entry()
    elif network == 'mainnet':
        print('Sorry mainnet is now internal nodes only!!!')
        print('Please use https://rpc.mainnet.near.org to reach mainnet rpc')
    else:
        init_flags = [f'--chain-id={network}']
        if account_id:
            init_flags.append(f'--account-id={account_id}')

        setup_and_run(nodocker,
                      binary_path,
                      image,
                      home,
                      init_flags=init_flags,
                      boot_nodes=boot_nodes,
                      verbose=verbose,
                      args=[])


@click.option('--keep-watcher', is_flag=True, help='Keep the watcher running.')
@cli.command()
def stop(keep_watcher):
    stop(keep_watcher)


@click.option('--follow', is_flag=True, help='Follow the logs.')
@click.option('--lines', '-l', default=100, type=int)
@cli.command()
def logs(follow, lines):
    show_logs(follow, lines)


if __name__ == '__main__':
    cli()
